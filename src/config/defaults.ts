import { spacing, theme } from '../plugins';
import { Configuration } from '../types';

export const defaultConfig: Configuration = {
    // Each plugin returns { parser, generator? }
    // Each parser function recieves the config object to be processed
    // The return value for each parser will be a variables group or styles group, containing an array of elements
    // Each generator processes the return values of the parser into a string
    plugins: [
        // color({
        //     name: (path, value) => 'color--'
        // }), // Parser, options { name: (parts) => `color--${parts.join('--')}` }
        spacing(),
        // borderRadius(), // Parser, finds field ending with 'borderRadius'
        // border(), // Parser, finds field ending with 'border'
        // boxShadow(), // Parser, finds field ending with 'boxShadow'
        // generic(), // Parser, finds anything else
        theme() // Generator, renders comment and applies generators to every item in items, wraps items in class if not default
        // group(), // Generator, renders comment and applies generators to every item in items
        // variable() // Generator, renders CSS Variable
    ],
    parsers: [],
    generators: [],

    // The config object itself will be processed by the plugins
    variables: {
        padding: '1rem',
        margin: '1rem'
    },
    theme: {
        padding: '1rem',
        margin: {
            top: '1rem',
            right: '1rem',
            bottom: '1rem',
            left: '1rem'
        },
        border: {
            width: '1px',
            style: 'solid',
            color: '#000000'
        },
        colors: {
            green: '#031124'
            // red: {
            //     // Override mode, 10, 20, 30, etc should be auto-generated by parser (configurable via config)
            //     default: '#411412',
            //     10: '#411412',
            //     20: '#411412',
            //     30: '#411412',
            //     40: '#411412',
            //     50: '#411412',
            //     60: '#411412',
            //     70: '#411412',
            //     80: '#411412',
            //     90: '#411412'
            // }
        },
        overrides: {
            dark: { // Requires override class fn for generator `.-dark`
                colors: {
                    green: ({ theme }) => theme.colors.green,
                    red: '#412321'
                }
            }
        }
    }
};

// Possible values for padding
// '1rem'
// '1rem 1rem'
// '1rem 1rem 1rem'
// '1rem 1rem 1rem 1rem'
// ['1rem']
// ['1rem', '1rem']
// ['1rem', '1rem', '1rem']
// ['1rem', '1rem', '1rem', '1rem']
// { top: '1rem' }

// Return type example
const returnValue = [
    {
        type: 'theme',
        name: 'default',
        items: [
            {
                type: 'group',
                name: 'Padding',
                items: [
                    { type: 'variable', name: 'padding-top', value: '1rem' },
                    { type: 'variable', name: 'padding-right', value: '1rem' },
                    { type: 'variable', name: 'padding-bottom', value: '1rem' },
                    { type: 'variable', name: 'padding-left', value: '1rem' }
                ]
            },
            {
                type: 'group',
                name: 'Margin',
                items: [
                    { type: 'variable', name: 'margin-top', value: '1rem' },
                    { type: 'variable', name: 'margin-right', value: '1rem' },
                    { type: 'variable', name: 'margin-bottom', value: '1rem' },
                    { type: 'variable', name: 'margin-left', value: '1rem' }
                ]
            },
            {
                type: 'group',
                name: 'Colors',
                items: [
                    {
                        type: 'group',
                        name: 'Red',
                        items: [
                            { type: 'variable', name: 'color--red--h', value: '50' },
                            { type: 'variable', name: 'color--red--s', value: '31%' },
                            { type: 'variable', name: 'color--red--l', value: '55%' },
                            { type: 'variable', name: 'color--red--a', value: '1' },
                            { type: 'variable', name: 'color--red', value: 'hsla(var(--color--red--h), var(--color--red--s), var(--color--red--l), var(--color--red--a))' }
                        ]
                    }
                ]
            }
        ]
    }
];

// Return types are passed to generators
